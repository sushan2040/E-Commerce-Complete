pipeline {
    agent any
    environment {
        AWS_DOCKER_REGISTRY = '235494784067.dkr.ecr.eu-north-1.amazonaws.com'
        APP_NAME = 'ecommerce'
        APP_VERSION = "1.$BUILD_ID"
        AWS_DEFAULT_REGION = "eu-north-1"
        AWS_ECS_CLUSTER = "ECommerce-final"
        AWS_ECS_TD_PROD = "ecommerce"
        TARGET_GROUP_ARN="arn:aws:elasticloadbalancing:eu-north-1:235494784067:targetgroup/ecommerce-network/a8bf4767bc1a572b"
    }

    stages {
        stage('Build') {
            agent {
                docker {
                    image 'maven:3.8.6-eclipse-temurin-17'
                    reuseNode true
                }
            }
            steps {
                sh '''
                    ls -la
                    mvn clean package -DskipTests
                    ls -la target/
                '''
            }
        }

        stage('Build Docker Image') {
            agent {
                docker {
                    image 'amazon/aws-cli'
                    reuseNode true
                    args "-u root -v /var/run/docker.sock:/var/run/docker.sock --entrypoint=''"
                }
            }
            steps {
                sh 'amazon-linux-extras install docker -y'

                withCredentials([usernamePassword(credentialsId: 'my-aws', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                    script {
                        retry(3) { 
                            sh '''
                                echo "Logging into AWS ECR..."
                                aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_DOCKER_REGISTRY
                            '''
                        }
                    }

                    sh '''
                        echo "Building Docker Image..."
                        docker build -t $AWS_DOCKER_REGISTRY/$APP_NAME:$APP_VERSION .

                        echo "Tagging Image..."
                        docker tag $AWS_DOCKER_REGISTRY/$APP_NAME:$APP_VERSION $AWS_DOCKER_REGISTRY/$APP_NAME:latest

                        echo "Pushing Image to ECR..."
                        docker push $AWS_DOCKER_REGISTRY/$APP_NAME:$APP_VERSION
                        docker push $AWS_DOCKER_REGISTRY/$APP_NAME:latest
                    '''
                }
            }
        }

        stage('Deploy to AWS ECS') {
            agent {
                docker {
                    image 'amazon/aws-cli'
                    reuseNode true
                    args "-u root --entrypoint=''"
                }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'my-aws', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                    sh '''
                        aws --version
                        yum install jq -y || echo "jq already installed"

                        echo "Updating ECS Task Definition..."
                        LATEST_TD_REVISION=$(aws ecs register-task-definition --cli-input-json file://aws/task-defination-prod.json | jq '.taskDefinition.revision')
                        echo "Latest Task Definition Revision: $LATEST_TD_REVISION"

                        echo "Updating ECS Service..."
                        aws ecs update-service --cluster $AWS_ECS_CLUSTER --service $AWS_ECS_TD_PROD --task-definition $AWS_ECS_TD_PROD:$LATEST_TD_REVISION --load-balancers targetGroupArn=$TARGET_GROUP_ARN,containerName=$APP_NAME,containerPort=8080 \

                        echo "Waiting for service to stabilize..."
                        aws ecs wait services-stable --cluster $AWS_ECS_CLUSTER --services $AWS_ECS_TD_PROD
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "Deployment successful!"
        }
        failure {
            echo "Deployment failed!"
        }
    }
}
